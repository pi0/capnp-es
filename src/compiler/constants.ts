// Based on https://github.com/jdiaz5513/capnp-ts (MIT - Julián Díaz)

import ts, { factory as f } from "typescript";
import * as s from "../std/schema";

/** BigInt */

export const BIGINT = f.createIdentifier("BigInt");

/** boolean */

export const BOOLEAN_TYPE = f.createTypeReferenceNode("boolean");

/** capnp */

export const CAPNP = f.createIdentifier("$");

/** A Mapping of various types to their list type constructor. */

export const ConcreteListType = {
  [s.Type.ANY_POINTER]: "$.AnyPointerList",
  [s.Type.BOOL]: "$.BoolList",
  [s.Type.DATA]: "$.DataList",
  [s.Type.ENUM]: "$.Uint16List",
  [s.Type.FLOAT32]: "$.Float32List",
  [s.Type.FLOAT64]: "$.Float64List",
  [s.Type.INT16]: "$.Int16List",
  [s.Type.INT32]: "$.Int32List",
  [s.Type.INT64]: "$.Int64List",
  [s.Type.INT8]: "$.Int8List",
  [s.Type.INTERFACE]: "$.InterfaceList",
  [s.Type.LIST]: "$.PointerList",
  [s.Type.STRUCT]: "$.CompositeList",
  [s.Type.TEXT]: "$.TextList",
  [s.Type.UINT16]: "$.Uint16List",
  [s.Type.UINT32]: "$.Uint32List",
  [s.Type.UINT64]: "$.Uint64List",
  [s.Type.UINT8]: "$.Uint8List",
  [s.Type.VOID]: "$.VoidList",
};

/** export */

export const EXPORT = f.createToken(ts.SyntaxKind.ExportKeyword);

/** length */

export const LENGTH = f.createIdentifier("length");

/** Some data used to help generate code for primitive struct fields. */

export const Primitive: {
  [t: number]: {
    byteLength: number;
    getter: string;
    mask: string;
    setter: string;
  };
} = {
  [s.Type.BOOL]: {
    byteLength: 1,
    getter: "getBit",
    mask: "getBitMask",
    setter: "setBit",
  },
  [s.Type.ENUM]: {
    byteLength: 2,
    getter: "getUint16",
    mask: "getUint16Mask",
    setter: "setUint16",
  },
  [s.Type.FLOAT32]: {
    byteLength: 4,
    getter: "getFloat32",
    mask: "getFloat32Mask",
    setter: "setFloat32",
  },
  [s.Type.FLOAT64]: {
    byteLength: 8,
    getter: "getFloat64",
    mask: "getFloat64Mask",
    setter: "setFloat64",
  },
  [s.Type.INT16]: {
    byteLength: 2,
    getter: "getInt16",
    mask: "getInt16Mask",
    setter: "setInt16",
  },
  [s.Type.INT32]: {
    byteLength: 4,
    getter: "getInt32",
    mask: "getInt32Mask",
    setter: "setInt32",
  },
  [s.Type.INT64]: {
    byteLength: 8,
    getter: "getInt64",
    mask: "getInt64Mask",
    setter: "setInt64",
  },
  [s.Type.INT8]: {
    byteLength: 1,
    getter: "getInt8",
    mask: "getInt8Mask",
    setter: "setInt8",
  },
  [s.Type.UINT16]: {
    byteLength: 2,
    getter: "getUint16",
    mask: "getUint16Mask",
    setter: "setUint16",
  },
  [s.Type.UINT32]: {
    byteLength: 4,
    getter: "getUint32",
    mask: "getUint32Mask",
    setter: "setUint32",
  },
  [s.Type.UINT64]: {
    byteLength: 8,
    getter: "getUint64",
    mask: "getUint64Mask",
    setter: "setUint64",
  },
  [s.Type.UINT8]: {
    byteLength: 1,
    getter: "getUint8",
    mask: "getUint8Mask",
    setter: "setUint8",
  },
  [s.Type.VOID]: {
    byteLength: 0,
    getter: "getVoid",
    mask: "getVoidMask",
    setter: "setVoid",
  },
};

/** number */

export const NUMBER_TYPE = f.createTypeReferenceNode("number");

/** __O */
// This is referenced so frequently it gets a shorthand!
export const OBJECT_SIZE = f.createIdentifier("$.ObjectSize");

/** readonly */

export const READONLY = f.createToken(ts.SyntaxKind.ReadonlyKeyword);

/** No... comment? */

export const SOURCE_COMMENT = `// This file has been automatically generated by capnp-es. \n`;

/** static */

export const STATIC = f.createToken(ts.SyntaxKind.StaticKeyword);

/** async */

export const ASYNC = f.createToken(ts.SyntaxKind.AsyncKeyword);

/** ? */

export const QUESTION_TOKEN = f.createToken(ts.SyntaxKind.QuestionToken);

/** string */

export const STRING_TYPE = f.createTypeReferenceNode("string");

/** Struct */
export const STRUCT = f.createIdentifier("$.Struct");

/** this */

export const THIS = f.createThis();

/**
 * Used to look up the ts.capnp file by its ID.
 *
 * NOTE: The file ID should never change.
 */

export const TS_FILE_ID = "e37ded525a68a7c9";

/** value */

export const VALUE = f.createIdentifier("value");

/** void */

export const VOID_TYPE = f.createTypeReferenceNode("void");

/** any */

export const ANY_TYPE = f.createTypeReferenceNode("any");
